{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielnathan/WEBSITES/monsters-rolodex/src/App.js\";\nimport { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport './App.css'; // here we replaced the function App() {}\n//                              return () \n// with the following, everything wrapped also inside the render () method.\n// this is a class compenent, instead of a functional component\n// this app component represents the entire application\n// this is a best practice.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    // constructor call always run first.\n    super(); // 'this' references THIS class.\n\n    this.onSearchChange = event => {\n      // event target value gives us the string that is in the searchbar so far\n      const searchField = event.target.value.toLocaleLowerCase();\n      this.setState(() => {\n        return {\n          searchField\n        };\n      });\n    };\n\n    this.state = {\n      // initialise state as empty array.\n      monsters: [],\n      searchField: ''\n    };\n    console.log(\"constructor\");\n  } // inside here will get run whenever the component mounts\n  // mounting: the first time a component gets placed onto the DOM.\n\n\n  componentDidMount() {\n    // lifecycle method\n    // fetch returns a promise, then() (asyncronous), which says \"eventually I'll have a value\"\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()) // this is what is returned from .then, gets passed to (users)\n    .then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }, () => {\n      console.log(this.state); // log out our new state\n    }));\n  } // this method used to be in our onChange event handler in our input field.\n  // we've moved it here so react doesn't just call an anonymous function everytime it renders\n  // this ups performance.\n\n\n  // every time needs to update the DOM, react runs this render() method.\n  render() {\n    console.log(\"render\"); // filter() is an array method that MAKES A NEW ARRAY. It recieves a callback you give to it\n    // and will pass and call it onto each element inside the array. we called each one (monster)\n    // it expects a boolean. true => keep it. false => take it out.\n    // then we are returning the monster.name, made into a lower case string, IF it includes() the searchfield string.\n    // here we have pulled off the methods and values, that were originally on this.state and this\n    // and cast them to variables.\n\n    const {\n      monsters,\n      searchField\n    } = this.state;\n    const {\n      onSearchChange\n    } = this; // seeing as we have destructured, we can take off this. and this.state from the key value pairs\n\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"search-box\",\n        type: \"search\",\n        placeholder: \"search monsters\" // onChange is an anonymous function, meaning that when JS finds it, it will create hte function for you\n        // after this, it gets thrown away... so we've moved it into the component block!\n        // it has to be this.onSearchChange because the method is attached to our class now.\n        ,\n        onChange: onSearchChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","CardList","App","constructor","onSearchChange","event","searchField","target","value","toLocaleLowerCase","setState","state","monsters","console","log","componentDidMount","fetch","then","response","json","users","render","filteredMonsters","filter","monster","name","includes"],"sources":["/Users/gabrielnathan/WEBSITES/monsters-rolodex/src/App.js"],"sourcesContent":["\nimport { Component } from 'react';\n\nimport CardList from './components/card-list/card-list.component';\nimport './App.css';\n\n// here we replaced the function App() {}\n//                              return () \n// with the following, everything wrapped also inside the render () method.\n// this is a class compenent, instead of a functional component\n\n\n// this app component represents the entire application\n// this is a best practice.\nclass App extends Component {\n  constructor() {   // constructor call always run first.\n    super();\n      // 'this' references THIS class.\n      this.state = { // initialise state as empty array.\n        monsters: [],\n        searchField: ''\n      };\n      console.log(\"constructor\");\n  }\n\n  // inside here will get run whenever the component mounts\n  // mounting: the first time a component gets placed onto the DOM.\n  componentDidMount() { // lifecycle method\n    // fetch returns a promise, then() (asyncronous), which says \"eventually I'll have a value\"\n    \n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json()) // this is what is returned from .then, gets passed to (users)\n    .then ((users) => \n      this.setState(\n        () => {\n        return {monsters: users}\n        },\n        () => {\n        console.log(this.state); // log out our new state\n        }\n      )\n    );\n  }\n\n  // this method used to be in our onChange event handler in our input field.\n  // we've moved it here so react doesn't just call an anonymous function everytime it renders\n  // this ups performance.\n  onSearchChange = (event) => { \n    // event target value gives us the string that is in the searchbar so far\n    const searchField = event.target.value.toLocaleLowerCase();\n    this.setState(\n      () => {\n        return { searchField };\n      }\n    );\n  }\n\n  // every time needs to update the DOM, react runs this render() method.\n  render() {\n    console.log(\"render\");\n    // filter() is an array method that MAKES A NEW ARRAY. It recieves a callback you give to it\n    // and will pass and call it onto each element inside the array. we called each one (monster)\n    // it expects a boolean. true => keep it. false => take it out.\n    // then we are returning the monster.name, made into a lower case string, IF it includes() the searchfield string.\n    \n    // here we have pulled off the methods and values, that were originally on this.state and this\n    // and cast them to variables.\n    const { monsters, searchField } = this.state;\n    const { onSearchChange } = this;\n\n    // seeing as we have destructured, we can take off this. and this.state from the key value pairs\n    const filteredMonsters = monsters.filter((monster)=> {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n      \n    return ( \n      <div className=\"App\">\n        <input \n          className=\"search-box\"\n          type=\"search\"\n          placeholder=\"search monsters\"\n          // onChange is an anonymous function, meaning that when JS finds it, it will create hte function for you\n          // after this, it gets thrown away... so we've moved it into the component block!\n          // it has to be this.onSearchChange because the method is attached to our class now.\n          onChange={onSearchChange}\n        />\n        \n        {/* {filteredMonsters.map((monster) => {\n            // elements returned from map() here need unique key values, which will be strings.\n            // API's will all have these. like a serial number. only react sees this (not rendered)\n            // in this case, these will be rendered into h1s inside divs\n            return (\n              <div key={monster.id}>\n                <h1>{monster.name}</h1>\n              </div>\n            )\n        })}  */}\n\n        <CardList />\n      </div>\n    );\n  }\n\n} \n\nexport default App;\n"],"mappings":";AACA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,QAAP,MAAqB,4CAArB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AAGA;AACA;;;;AACA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;EAC1BG,WAAW,GAAG;IAAI;IAChB,QADY,CAEV;;IAFU,KAgCdC,cAhCc,GAgCIC,KAAD,IAAW;MAC1B;MACA,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,iBAAnB,EAApB;MACA,KAAKC,QAAL,CACE,MAAM;QACJ,OAAO;UAAEJ;QAAF,CAAP;MACD,CAHH;IAKD,CAxCa;;IAGV,KAAKK,KAAL,GAAa;MAAE;MACbC,QAAQ,EAAE,EADC;MAEXN,WAAW,EAAE;IAFF,CAAb;IAIAO,OAAO,CAACC,GAAR,CAAY,aAAZ;EACH,CATyB,CAW1B;EACA;;;EACAC,iBAAiB,GAAG;IAAE;IACpB;IAEAC,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EACqC;IADrC,CAECF,IAFD,CAEQG,KAAD,IACL,KAAKV,QAAL,CACE,MAAM;MACN,OAAO;QAACE,QAAQ,EAAEQ;MAAX,CAAP;IACC,CAHH,EAIE,MAAM;MACNP,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB,EADM,CACmB;IACxB,CANH,CAHF;EAYD,CA5ByB,CA8B1B;EACA;EACA;;;EAWA;EACAU,MAAM,GAAG;IACPR,OAAO,CAACC,GAAR,CAAY,QAAZ,EADO,CAEP;IACA;IACA;IACA;IAEA;IACA;;IACA,MAAM;MAAEF,QAAF;MAAYN;IAAZ,IAA4B,KAAKK,KAAvC;IACA,MAAM;MAAEP;IAAF,IAAqB,IAA3B,CAVO,CAYP;;IACA,MAAMkB,gBAAgB,GAAGV,QAAQ,CAACW,MAAT,CAAiBC,OAAD,IAAY;MACnD,OAAOA,OAAO,CAACC,IAAR,CAAahB,iBAAb,GAAiCiB,QAAjC,CAA0CpB,WAA1C,CAAP;IACD,CAFwB,CAAzB;IAIA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBACE;QACE,SAAS,EAAC,YADZ;QAEE,IAAI,EAAC,QAFP;QAGE,WAAW,EAAC,iBAHd,CAIE;QACA;QACA;QANF;QAOE,QAAQ,EAAEF;MAPZ;QAAA;QAAA;QAAA;MAAA,QADF,eAsBE,QAAC,QAAD;QAAA;QAAA;QAAA;MAAA,QAtBF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EA0BD;;AAvFyB;;AA2F5B,eAAeF,GAAf"},"metadata":{},"sourceType":"module"}