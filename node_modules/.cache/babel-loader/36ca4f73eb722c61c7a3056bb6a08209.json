{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielnathan/WEBSITES/monsters-rolodex/src/App.js\";\nimport { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css'; // here we replaced the function App() {}\n//                              return () \n// with the following, everything wrapped also inside the render () method.\n// this is a class compenent, instead of a functional component\n// this app component represents the entire application\n// this is a best practice.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    // constructor call always run first.\n    super();\n    this.state = {\n      // initialise state as empty array.\n      monsters: []\n    };\n    console.log('constructor');\n  } // inside here will get run whenever the component mounts\n  // mounting: the first time a component gets placed onto the DOM.\n\n\n  componentDidMount() {\n    // lifecycle method\n    // fetch returns a promise, then() (asyncronous), which says \"eventually I'll have a value\"\n    console.log('componentDidMount');\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()) // this is what is returned from .then, gets passed to (users)\n    .then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }, () => {\n      console.log(this.state); // log out our new state\n    }));\n  }\n\n  render() {\n    console.log('render');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: this.state.monsters.map(monster => {\n        // elements returned from map() here need unique key values, which will be strings.\n        // API's will all have these. like a serial number. only react sees this (not rendered)\n        // in this case, these will be rendered into h1s inside divs\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: monster.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this)\n        }, monster.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","logo","App","constructor","state","monsters","console","log","componentDidMount","fetch","then","response","json","users","setState","render","map","monster","name","id"],"sources":["/Users/gabrielnathan/WEBSITES/monsters-rolodex/src/App.js"],"sourcesContent":["\nimport { Component } from 'react';\n\nimport logo from './logo.svg';\nimport './App.css';\n\n// here we replaced the function App() {}\n//                              return () \n// with the following, everything wrapped also inside the render () method.\n// this is a class compenent, instead of a functional component\n\n\n// this app component represents the entire application\n// this is a best practice.\nclass App extends Component {\n  constructor() {   // constructor call always run first.\n    super();\n      this.state = { // initialise state as empty array.\n        monsters: [],\n      };\n      console.log('constructor');\n  }\n\n  // inside here will get run whenever the component mounts\n  // mounting: the first time a component gets placed onto the DOM.\n  componentDidMount() { // lifecycle method\n    // fetch returns a promise, then() (asyncronous), which says \"eventually I'll have a value\"\n    console.log('componentDidMount')\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json()) // this is what is returned from .then, gets passed to (users)\n    .then ((users) => \n      this.setState(\n        () => {\n        return {monsters: users}\n        },\n        () => {\n        console.log(this.state); // log out our new state\n        }\n      )\n    );\n  }\n\n \n  render() {\n    console.log('render');\n    return ( \n      <div className=\"App\">\n        {this.state.monsters.map((monster) => {\n            // elements returned from map() here need unique key values, which will be strings.\n            // API's will all have these. like a serial number. only react sees this (not rendered)\n            // in this case, these will be rendered into h1s inside divs\n            return (\n              <div key={monster.id}>\n                <h1>{monster.name}</h1>\n              </div>\n            )\n        })} \n      </div>\n    );\n  }\n\n} \n\nexport default App;\n"],"mappings":";AACA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,IAAP,MAAiB,YAAjB;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AAGA;AACA;;;;AACA,MAAMC,GAAN,SAAkBF,SAAlB,CAA4B;EAC1BG,WAAW,GAAG;IAAI;IAChB;IACE,KAAKC,KAAL,GAAa;MAAE;MACbC,QAAQ,EAAE;IADC,CAAb;IAGAC,OAAO,CAACC,GAAR,CAAY,aAAZ;EACH,CAPyB,CAS1B;EACA;;;EACAC,iBAAiB,GAAG;IAAE;IACpB;IACAF,OAAO,CAACC,GAAR,CAAY,mBAAZ;IACAE,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EACqC;IADrC,CAECF,IAFD,CAEQG,KAAD,IACL,KAAKC,QAAL,CACE,MAAM;MACN,OAAO;QAACT,QAAQ,EAAEQ;MAAX,CAAP;IACC,CAHH,EAIE,MAAM;MACNP,OAAO,CAACC,GAAR,CAAY,KAAKH,KAAjB,EADM,CACmB;IACxB,CANH,CAHF;EAYD;;EAGDW,MAAM,GAAG;IACPT,OAAO,CAACC,GAAR,CAAY,QAAZ;IACA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,UACG,KAAKH,KAAL,CAAWC,QAAX,CAAoBW,GAApB,CAAyBC,OAAD,IAAa;QAClC;QACA;QACA;QACA,oBACE;UAAA,uBACE;YAAA,UAAKA,OAAO,CAACC;UAAb;YAAA;YAAA;YAAA;UAAA;QADF,GAAUD,OAAO,CAACE,EAAlB;UAAA;UAAA;UAAA;QAAA,QADF;MAKH,CATA;IADH;MAAA;MAAA;MAAA;IAAA,QADF;EAcD;;AA7CyB;;AAiD5B,eAAejB,GAAf"},"metadata":{},"sourceType":"module"}