{"ast":null,"code":"var _jsxFileName = \"/Users/gabrielnathan/WEBSITES/monsters-rolodex/src/App.js\";\nimport { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css'; // here we replaced the function App()with the following, everything wrapped also inside the render () method.\n// this is a class compenent, instead of a functional component\n// this  component represents the entire application\n// this is a best practice.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor() {\n    // constructor call always run first.\n    super(); // 'this' references THIS class.\n\n    this.onSearchChange = event => {\n      // event target value gives us the string that is in the searchbar so far\n      const searchField = event.target.value.toLocaleLowerCase();\n      this.setState(() => {\n        return {\n          searchField\n        };\n      });\n    };\n\n    this.state = {\n      // initialise state as empty array.\n      monsters: [],\n      searchField: ''\n    };\n  } // inside here will get run whenever the component mounts\n  // mounting: the first time a component gets placed onto the DOM.\n\n\n  componentDidMount() {\n    // lifecycle method\n    // fetch returns a promise, then() (asyncronous), which says \"eventually I'll have a value\"\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json()) // this is what is returned from .then, gets passed to (users)\n    .then(users => this.setState(() => {\n      return {\n        monsters: users\n      };\n    }));\n  } // this method used to be in our onChange event handler in our input field.\n  // we've moved it here so react doesn't just call an anonymous function everytime it renders\n  // this ups performance.\n\n\n  // every time needs to update the DOM, react runs this render() method.\n  render() {\n    // here we have pulled off the methods and values, that were originally on this.state and this\n    // and cast them to variables.\n    const {\n      monsters,\n      searchField\n    } = this.state;\n    const {\n      onSearchChange\n    } = this; // seeing as we have destructured, we can take off this. and this.state from the key value pairs\n    // filter() is an array method that MAKES A NEW ARRAY. It recieves a callback \n    // and will pass and call it onto each element inside the array. we called each one (monster)\n    // it expects a boolean. true => keep it. false => take it out.\n    // then we are returning the monster.name, made into a lower case string, IF it includes() the searchfield string.\n\n    const filteredMonsters = monsters.filter(monster => {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"app-title\",\n        children: \" Monsters Rolodex \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBox, {\n        className: \"search-box\",\n        onChangeHandler: onSearchChange,\n        placeholder: \"search monsters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CardList, {\n        monsters: filteredMonsters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["Component","CardList","SearchBox","App","constructor","onSearchChange","event","searchField","target","value","toLocaleLowerCase","setState","state","monsters","componentDidMount","fetch","then","response","json","users","render","filteredMonsters","filter","monster","name","includes"],"sources":["/Users/gabrielnathan/WEBSITES/monsters-rolodex/src/App.js"],"sourcesContent":["\nimport { Component } from 'react';\n\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\nimport './App.css';\n\n// here we replaced the function App()with the following, everything wrapped also inside the render () method.\n// this is a class compenent, instead of a functional component\n\n// this  component represents the entire application\n// this is a best practice.\nclass App extends Component {\n\n  constructor() {   // constructor call always run first.\n    super();\n      // 'this' references THIS class.\n      this.state = { // initialise state as empty array.\n        monsters: [],\n        searchField: ''\n      };\n  }\n\n  // inside here will get run whenever the component mounts\n  // mounting: the first time a component gets placed onto the DOM.\n  componentDidMount() { // lifecycle method\n    // fetch returns a promise, then() (asyncronous), which says \"eventually I'll have a value\"\n    \n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json()) // this is what is returned from .then, gets passed to (users)\n    .then ((users) => \n      this.setState(\n        () => {\n        return {monsters: users}\n        }\n      )\n    );\n  } \n\n  // this method used to be in our onChange event handler in our input field.\n  // we've moved it here so react doesn't just call an anonymous function everytime it renders\n  // this ups performance.\n  onSearchChange = (event) => { \n    // event target value gives us the string that is in the searchbar so far\n    const searchField = event.target.value.toLocaleLowerCase();\n    this.setState(\n      () => {\n        return { searchField };\n      }\n    );\n  }\n\n  // every time needs to update the DOM, react runs this render() method.\n  render() {\n    \n    // here we have pulled off the methods and values, that were originally on this.state and this\n    // and cast them to variables.\n    const { monsters, searchField } = this.state;\n    const { onSearchChange } = this;\n\n    // seeing as we have destructured, we can take off this. and this.state from the key value pairs\n\n    // filter() is an array method that MAKES A NEW ARRAY. It recieves a callback \n    // and will pass and call it onto each element inside the array. we called each one (monster)\n    // it expects a boolean. true => keep it. false => take it out.\n    // then we are returning the monster.name, made into a lower case string, IF it includes() the searchfield string.\n\n    const filteredMonsters = monsters.filter((monster)=> {\n      return monster.name.toLocaleLowerCase().includes(searchField);\n    });\n      \n    return ( \n      <div className=\"App\">\n\n        <h1 className=\"app-title\"> Monsters Rolodex </h1>\n\n        <SearchBox \n          className=\"search-box\"\n          onChangeHandler={onSearchChange}\n          placeholder=\"search monsters\"\n          />\n        <CardList monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n\n} \n\nexport default App;\n"],"mappings":";AACA,SAASA,SAAT,QAA0B,OAA1B;AAEA,OAAOC,QAAP,MAAqB,4CAArB;AACA,OAAOC,SAAP,MAAsB,8CAAtB;AACA,OAAO,WAAP,C,CAEA;AACA;AAEA;AACA;;;;AACA,MAAMC,GAAN,SAAkBH,SAAlB,CAA4B;EAE1BI,WAAW,GAAG;IAAI;IAChB,QADY,CAEV;;IAFU,KA4BdC,cA5Bc,GA4BIC,KAAD,IAAW;MAC1B;MACA,MAAMC,WAAW,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,CAAmBC,iBAAnB,EAApB;MACA,KAAKC,QAAL,CACE,MAAM;QACJ,OAAO;UAAEJ;QAAF,CAAP;MACD,CAHH;IAKD,CApCa;;IAGV,KAAKK,KAAL,GAAa;MAAE;MACbC,QAAQ,EAAE,EADC;MAEXN,WAAW,EAAE;IAFF,CAAb;EAIH,CATyB,CAW1B;EACA;;;EACAO,iBAAiB,GAAG;IAAE;IACpB;IAEAC,KAAK,CAAC,4CAAD,CAAL,CACCC,IADD,CACOC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADpB,EACqC;IADrC,CAECF,IAFD,CAEQG,KAAD,IACL,KAAKR,QAAL,CACE,MAAM;MACN,OAAO;QAACE,QAAQ,EAAEM;MAAX,CAAP;IACC,CAHH,CAHF;EASD,CAzByB,CA2B1B;EACA;EACA;;;EAWA;EACAC,MAAM,GAAG;IAEP;IACA;IACA,MAAM;MAAEP,QAAF;MAAYN;IAAZ,IAA4B,KAAKK,KAAvC;IACA,MAAM;MAAEP;IAAF,IAAqB,IAA3B,CALO,CAOP;IAEA;IACA;IACA;IACA;;IAEA,MAAMgB,gBAAgB,GAAGR,QAAQ,CAACS,MAAT,CAAiBC,OAAD,IAAY;MACnD,OAAOA,OAAO,CAACC,IAAR,CAAad,iBAAb,GAAiCe,QAAjC,CAA0ClB,WAA1C,CAAP;IACD,CAFwB,CAAzB;IAIA,oBACE;MAAK,SAAS,EAAC,KAAf;MAAA,wBAEE;QAAI,SAAS,EAAC,WAAd;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFF,eAIE,QAAC,SAAD;QACE,SAAS,EAAC,YADZ;QAEE,eAAe,EAAEF,cAFnB;QAGE,WAAW,EAAC;MAHd;QAAA;QAAA;QAAA;MAAA,QAJF,eASE,QAAC,QAAD;QAAU,QAAQ,EAAEgB;MAApB;QAAA;QAAA;QAAA;MAAA,QATF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAaD;;AAxEyB;;AA4E5B,eAAelB,GAAf"},"metadata":{},"sourceType":"module"}